{
    "AWSTemplateFormatVersion" : "2010-09-09",
  
    "Description" : "Initializes a three-tier VPC in us-east-1 with redundant subnet architecture in us-east-1b and us-east-1c",
  
    "Parameters" : {
      
      "SSHLocation" : {
        "Description" : " The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
  
    "Mappings" : {

    },
    "Resources" : {
      "VPC" : {
        "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock" : "10.0.0.0/16",
          "Tags" : [ 
            {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
            {"Key" : "Watermark", "Value" : "github.com/stephenlf/AWS-Free-Tier-Three-Tier-WordPress"}
          ]
        }
      },
  
      "Subnet" : {
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "CidrBlock" : "10.0.0.0/24",
          "Tags" : [ 
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Watermark", "Value" : "github.com/stephenlf/AWS-Free-Tier-Three-Tier-WordPress"} 
        ]
        }
      },
  
      "InternetGateway" : {
        "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
          "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Watermark", "Value" : "github.com/stephenlf/AWS-Free-Tier-Three-Tier-WordPress"}
        ]
        }
      },
  
      "AttachGateway" : {
         "Type" : "AWS::EC2::VPCGatewayAttachment",
         "Properties" : {
           "VpcId" : { "Ref" : "VPC" },
           "InternetGatewayId" : { "Ref" : "InternetGateway" }
         }
      },
  
      "RouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId" : {"Ref" : "VPC"},
          "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Watermark", "Value" : "github.com/stephenlf/AWS-Free-Tier-Three-Tier-WordPress"} ]
        }
      },
  
      "Route" : {
        "Type" : "AWS::EC2::Route",
        "DependsOn" : "AttachGateway",
        "Properties" : {
          "RouteTableId" : { "Ref" : "RouteTable" },
          "DestinationCidrBlock" : "0.0.0.0/0",
          "GatewayId" : { "Ref" : "InternetGateway" }
        }
      },
  
      "SubnetRouteTableAssociation" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "Subnet" },
          "RouteTableId" : { "Ref" : "RouteTable" }
        }
      },
  
      "NetworkAcl" : {
        "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId" : {"Ref" : "VPC"},
          "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Watermark", "Value" : "github.com/stephenlf/AWS-Free-Tier-Three-Tier-WordPress"} ]
        }
      },
  
      "InboundHTTPNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "NetworkAcl"},
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "80", "To" : "80"}
        }
      },
  
      "InboundSSHNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "NetworkAcl"},
          "RuleNumber" : "101",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "22", "To" : "22"}
        }
      },
  
      "InboundResponsePortsNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "NetworkAcl"},
          "RuleNumber" : "102",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "1024", "To" : "65535"}
        }
      },
  
      "OutBoundHTTPNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "NetworkAcl"},
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "80", "To" : "80"}
        }
      },
  
      "OutBoundHTTPSNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "NetworkAcl"},
          "RuleNumber" : "101",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "443", "To" : "443"}
        }
      },
  
      "OutBoundResponsePortsNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "NetworkAcl"},
          "RuleNumber" : "102",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "1024", "To" : "65535"}
        }
      },
  
      "SubnetNetworkAclAssociation" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "Subnet" },
          "NetworkAclId" : { "Ref" : "NetworkAcl" }
        }
      },
  
      "IPAddress" : {
        "Type" : "AWS::EC2::EIP",
        "DependsOn" : "AttachGateway",
        "Properties" : {
          "Domain" : "vpc",
          "InstanceId" : { "Ref" : "WebServerInstance" }
        }
      }
    },
  
    "Outputs" : {
      "URL" : {
        "Value" : { "Fn::Join" : [ "", ["http://", { "Fn::GetAtt" : ["WebServerInstance", "PublicIp"] }]]},
        "Description" : "Newly created application URL"
      }
    }
  }
  